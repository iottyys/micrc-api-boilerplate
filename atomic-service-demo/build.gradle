plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.palantir.docker'
    id 'java'
    id 'groovy'
    id 'idea'
}

group = 'info.ttyy.frame'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR9")
    set('groovyVersion', '2.4.15')
    set('camelVersion', '3.6.0')
    set('mybatisPlusVersion', '3.4.2')
    set('graphqlSpringVersion', '7.1.0')
    set('micrometerVersion', '1.5.5')
}

springBoot {
    mainClassName='com.snszyk.iiot.lim.quota.QuotaServiceApplication'
}

task copyGraphqlSchema(type: Copy) {
    copy {
        includeEmptyDirs false
        from('src/main/groovy') {
            include('**/*.graphql')
        }
        into("$buildDir/classes/groovy/main")
    }
}

task copyCamelRoutesAndDozerMappings(type: Copy) {
    copy {
        includeEmptyDirs false
        from('src/main/groovy') {
            include('**/*.xml')
        }
        into "$buildDir/classes/groovy/main"
    }
}

task copyJsonSchemas(type: Copy) {
    copy {
        includeEmptyDirs false
        from('src/main/groovy') {
            include('**/*.schema.json')
        }
        into "$buildDir/classes/groovy/main"
    }
}

compileJava.inputs.files(processResources)

dependencyManagement {
    imports {
        //noinspection GrUnresolvedAccess
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        //noinspection GrUnresolvedAccess
        mavenBom "org.apache.camel.springboot:camel-spring-boot-dependencies:${camelVersion}"
    }
}

dependencies {

    implementation project(':ttyys-core')
    annotationProcessor project(':ttyys-core')

    implementation "org.apache.avro:avro:1.9.1"
    implementation "org.apache.avro:avro-ipc:1.9.1"

    // for language
    implementation "com.google.guava:guava:30.1-jre"
    implementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

//    implementation "org.springframework.boot:spring-boot-starter-validation"

    // for camel
    implementation "org.apache.camel.springboot:camel-spring-boot-starter"
    implementation "org.apache.camel.springboot:camel-bean-starter"
    testImplementation "org.apache.camel:camel-test-spring-junit5"

    // for mybatis-plus
    implementation "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"

    // graphql
    implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:${graphqlSpringVersion}"
    implementation "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphqlSpringVersion}"
    testImplementation "com.graphql-java-kickstart:graphql-spring-boot-starter-test:${graphqlSpringVersion}"

    // for prometheus, k8s probe
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    runtimeOnly "org.springframework.cloud:spring-cloud-starter-kubernetes-config"
    runtimeOnly "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"

    // for database
    runtimeOnly "com.h2database:h2"
    runtimeOnly "mysql:mysql-connector-java"

    // for lombok
    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"

    // for test
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
    testImplementation("org.spockframework:spock-spring:1.3-groovy-2.4")
}

test {
    useJUnitPlatform()
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}

docker {
    name "${project.name}:${project.version}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    dockerfile project.file('Dockerfile')
}
